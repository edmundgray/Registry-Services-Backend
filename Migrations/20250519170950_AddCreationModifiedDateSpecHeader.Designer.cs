// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistryApi.Data;

#nullable disable

namespace RegistryServices.Migrations
{
    [DbContext(typeof(RegistryDbContext))]
    [Migration("20250519170950_AddCreationModifiedDateSpecHeader")]
    partial class AddCreationModifiedDateSpecHeader
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RegistryApi.Models.CoreInvoiceModel", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BusinessTerm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Cardinality")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SemanticDescription")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CoreInvoiceModel");
                });

            modelBuilder.Entity("RegistryApi.Models.ExtensionComponentModelElement", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityID"));

                    b.Property<string>("BusinessTerm")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BusinessTermID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Cardinality")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExtensionComponentID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ExtensionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Level")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ParentID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SemanticDescription")
                        .HasColumnType("text");

                    b.HasKey("EntityID");

                    b.HasIndex("ExtensionComponentID", "BusinessTermID")
                        .IsUnique()
                        .HasDatabaseName("UQ_ExtensionComponentModelElements_Component_BusinessTerm");

                    b.ToTable("ExtensionComponentModelElements");
                });

            modelBuilder.Entity("RegistryApi.Models.ExtensionComponentsModelHeader", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ECLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("ExtensionComponentsModelHeader");
                });

            modelBuilder.Entity("RegistryApi.Models.SpecificationCore", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityID"));

                    b.Property<string>("BusinessTermID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Cardinality")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("IdentityID")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfChange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsageNote")
                        .HasColumnType("text");

                    b.HasKey("EntityID");

                    b.HasIndex("BusinessTermID");

                    b.HasIndex("IdentityID");

                    b.ToTable("SpecificationCore");
                });

            modelBuilder.Entity("RegistryApi.Models.SpecificationExtensionComponent", b =>
                {
                    b.Property<int>("EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityID"));

                    b.Property<string>("BusinessTermID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Cardinality")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ExtensionComponentID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("IdentityID")
                        .HasColumnType("int");

                    b.Property<string>("Justification")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfExtension")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UsageNote")
                        .HasColumnType("text");

                    b.HasKey("EntityID");

                    b.HasIndex("IdentityID");

                    b.HasIndex("ExtensionComponentID", "BusinessTermID");

                    b.ToTable("SpecificationExtensionComponents");
                });

            modelBuilder.Entity("RegistryApi.Models.SpecificationIdentifyingInformation", b =>
                {
                    b.Property<int>("IdentityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityID"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoreVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfImplementation")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoverningEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCountrySpecification")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredSyntax")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SpecificationIdentifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SpecificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecificationSourceLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SpecificationVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubSector")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UnderlyingSpecificationIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdentityID");

                    b.ToTable("SpecificationIdentifyingInformation");
                });

            modelBuilder.Entity("RegistryApi.Models.ExtensionComponentModelElement", b =>
                {
                    b.HasOne("RegistryApi.Models.ExtensionComponentsModelHeader", "ExtensionComponentsModelHeader")
                        .WithMany("ExtensionComponentModelElements")
                        .HasForeignKey("ExtensionComponentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExtensionComponentsModelHeader");
                });

            modelBuilder.Entity("RegistryApi.Models.SpecificationCore", b =>
                {
                    b.HasOne("RegistryApi.Models.CoreInvoiceModel", "CoreInvoiceModel")
                        .WithMany("SpecificationCores")
                        .HasForeignKey("BusinessTermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RegistryApi.Models.SpecificationIdentifyingInformation", "SpecificationIdentifyingInformation")
                        .WithMany("SpecificationCores")
                        .HasForeignKey("IdentityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoreInvoiceModel");

                    b.Navigation("SpecificationIdentifyingInformation");
                });

            modelBuilder.Entity("RegistryApi.Models.SpecificationExtensionComponent", b =>
                {
                    b.HasOne("RegistryApi.Models.SpecificationIdentifyingInformation", "SpecificationIdentifyingInformation")
                        .WithMany("SpecificationExtensionComponents")
                        .HasForeignKey("IdentityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistryApi.Models.ExtensionComponentModelElement", "ExtensionComponentModelElement")
                        .WithMany("SpecificationExtensionComponents")
                        .HasForeignKey("ExtensionComponentID", "BusinessTermID")
                        .HasPrincipalKey("ExtensionComponentID", "BusinessTermID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExtensionComponentModelElement");

                    b.Navigation("SpecificationIdentifyingInformation");
                });

            modelBuilder.Entity("RegistryApi.Models.CoreInvoiceModel", b =>
                {
                    b.Navigation("SpecificationCores");
                });

            modelBuilder.Entity("RegistryApi.Models.ExtensionComponentModelElement", b =>
                {
                    b.Navigation("SpecificationExtensionComponents");
                });

            modelBuilder.Entity("RegistryApi.Models.ExtensionComponentsModelHeader", b =>
                {
                    b.Navigation("ExtensionComponentModelElements");
                });

            modelBuilder.Entity("RegistryApi.Models.SpecificationIdentifyingInformation", b =>
                {
                    b.Navigation("SpecificationCores");

                    b.Navigation("SpecificationExtensionComponents");
                });
#pragma warning restore 612, 618
        }
    }
}
